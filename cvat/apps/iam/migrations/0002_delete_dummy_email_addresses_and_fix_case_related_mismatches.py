# Generated by Django 4.2.21 on 2025-07-10 17:28

from django.conf import settings
from django.db import migrations
from django.db.models import Exists, F, OuterRef


def delete_email_addresses_for_dummy_users(apps, schema_editor):
    EmailAddress = apps.get_model("account", "EmailAddress")
    SocialAccount = apps.get_model("socialaccount", "SocialAccount")

    social_accounts = SocialAccount.objects.filter(user=OuterRef("user"))
    # delete EmailAddress records for dummy users that were created by invitations
    EmailAddress.objects.filter(
        ~Exists(social_accounts), verified=False, user__password__startswith="!"  # nosec
    ).delete()


def restore_email_addresses_for_dummy_users(apps, schema_editor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    EmailAddress = apps.get_model("account", "EmailAddress")
    SocialAccount = apps.get_model("socialaccount", "SocialAccount")

    social_accounts = SocialAccount.objects.filter(user=OuterRef("pk"))
    email_addresses = EmailAddress.objects.filter(user=OuterRef("pk"))
    dummy_users = (
        User.objects.filter(password__startswith="!")  # nosec
        .annotate(
            has_social_account=Exists(social_accounts), has_email_address=Exists(email_addresses)
        )
        .filter(has_social_account=False, has_email_address=False)
    )

    email_addresses_to_create = [
        EmailAddress(email=user.email, user=user, primary=True, verified=False)
        for user in dummy_users
    ]
    EmailAddress.objects.bulk_create(email_addresses_to_create, batch_size=2000)


def normalize_email_case_mismatches(apps, schema_editor):
    EmailAddress = apps.get_model("account", "EmailAddress")
    SocialAccount = apps.get_model("socialaccount", "SocialAccount")

    social_accounts = SocialAccount.objects.filter(user=OuterRef("user"))
    # fix case-related mismatches between User.email and EmailAddress.email
    email_addresses_to_update = (
        EmailAddress.objects.filter(
            ~Exists(social_accounts), verified=True, email__iexact=F("user__email")
        )
        .exclude(email=F("user__email"))
        .select_related("user")
    )

    for email_address in email_addresses_to_update:
        email_address.email = email_address.user.email

    EmailAddress.objects.bulk_update(email_addresses_to_update, ["email"], batch_size=2000)


class Migration(migrations.Migration):

    dependencies = [
        ("iam", "0001_remove_business_group"),
        ("account", "0005_emailaddress_idx_upper_email"),
        ("socialaccount", "0005_socialtoken_nullable_app"),
    ]

    operations = [
        migrations.RunPython(
            delete_email_addresses_for_dummy_users,
            reverse_code=restore_email_addresses_for_dummy_users,
        ),
        migrations.RunPython(
            normalize_email_case_mismatches,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
